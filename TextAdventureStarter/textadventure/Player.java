package textadventure;import java.util.Set;import interfaces.Container;import java.util.HashMap;import java.util.Iterator;import items.*;/** * A Player can contain objects and knows the Room it's currently in. */public class Player implements Container {	/** Room this Player is in at the moment */	private Room currentRoom;		/** Stores items this player is carrying */	private HashMap<String, Item> items;	/** Creates a player that starts in the given Room with no items */	public Player(Room startRoom) {		currentRoom = startRoom;		items = new HashMap<String, Item>();	}	/* Getters and setters */	public Room getCurrentRoom() {		return currentRoom;	}	public void setCurrentRoom(Room newRoom) {		currentRoom = newRoom;	}	/**	 * Adds an Item to our player's HashMap inventory.	 */	@Override	public void addItem(Item item) {		items.put((String) item.getName(), item);	}	@Override	public Item removeItem(Item item) {		return items.remove((String) item.getName());	}		@Override	public Item removeItem(String item) {		return items.remove(item);	}	/**	 * Returns whether a player has a particular Item	 */	@Override	public boolean hasItem(Item item) {		return item == null ? false : items.containsKey((String) item.getName());	}	/**	 * Returns whether a player has an item or not based on the Item's string name.	 */	@Override	public boolean hasItem(String item) {		return items.containsKey(item);	}	/**	 * Returns a copy of the Item held by this player.  If you need to modify an object held by the player, use	 * this method to get a copy of the Item then modify it, remove the old Item from the player, and add the	 * modified object.	 */	@Override	public Item getItem(String item) {		return items.get(item);	}		@Override	public String getItemString() {		return getInventory();	}	/**	 * Return a list of this Player's inventory items	 */	public String getInventory() {		String returnString = "";				if (items.size() == 0)			return returnString + " nothing";				Set<String> keys = items.keySet();		Iterator<String> keysIterator = keys.iterator();		while (keysIterator.hasNext()) {			returnString += keysIterator.next() + ", ";		}		return returnString.substring(0, returnString.length() - 2) + "\n";	}}