package textadventure;import java.util.HashMap;public class CommandWords {	/** A constant array that holds all valid individual first-word commands */	private static final String validCommands[] =			{ "go",		"take",		"get", 		"drop", 	"examine", 		"open", 	"close", 	"inventory",			  "use",	"look",		"help", 	"hints", 	"wait",			"restart",	"quit" };	/** A HashMap of all valid commands, including alias words.  For example, "x" means the same as "examine" */	private static HashMap<String, String> allCommands;	/**	 *  This list of commands is shown when player types 'help'	 *	Make sure this list contains common commands only and not special commands that	 *	are particular to your game.  Ex:  "wind [clock]"	 */	private static final String helpMenu = 			  "go [north, east, west, south]\n" +			  "take [Item]\n" +			  "get [Item]\n" +			  "drop [Item]\n" +			  "open [Item]\n" +			  "close [Item]\n" +			  "use [Item]\n" +			  "e(x)amine [Item]\n" +			  "(i)nventory, (l)ook, help, wait, restart, quit\n\n" +			  "Type 'hints' for a list of special commands (spoiler alert!)\n\n";	/**	 *  This list of commands is shown when player types 'hints'	 *  These should be commands that are particular to your game.  Ex:  "wind [clock]"	 */	private static final String hints = "Sorry, this game has no special commands yet.\n\n";	/**	 * Constructor initializes the command words.	 */	public CommandWords() {		allCommands = new HashMap<String, String>();		addValidCommands();		addAliasCommands();	}	/**	 * Takes the validCommands array and adds those commands	 * to the HashMap, which is ultimately what's used.	 */	private void addValidCommands() {		for (String command : validCommands)			allCommands.put(command, command);	}	/**	 * Define alias words here.  An alias word is an alternate form of a command	 * that gets translated into the formal command name.  For example, the first	 * entry below makes it so the user can type "x" and their command gets translated	 * into the command "examine"	 */	private void addAliasCommands() {			allCommands.put("x", "examine");		allCommands.put("l", "look");		allCommands.put("i", "inventory");				allCommands.put("get", "take");			}	/**	 * Check whether a given String is a valid command word. Return true if it is,	 * false if it isn't.	 **/	public boolean isCommand(String aString) {		return allCommands.containsKey(aString);	}	/**	 * Uses a HashMap to look up a command and translate it into its formal	 * command String.  For example, "x" gets translated into "examine"	 */	public String translate(String aString) {		return allCommands.get(aString);	}	/**	 * Prints the help menu.	 */	public void showCommendHelp() {		World.print(helpMenu);	}	/**	 * Prints the hints menu.	 */	public void showHints() {		World.print(hints);	}}